name: Release

on:
  push:
    tags:
      - "*"

jobs:
  calculate-version:
    name: Calculate Version
    runs-on: ubuntu-latest
    outputs:
      semVer: ${{ steps.gitversion.outputs.semVer }}
      assemblySemVer: ${{ steps.gitversion.outputs.assemblySemVer }}
      assemblySemFileVer: ${{ steps.gitversion.outputs.assemblySemFileVer }}
      informationalVersion: ${{ steps.gitversion.outputs.informationalVersion }}

    steps:
      - uses: actions/checkout@v2.4.2
        with:
          fetch-depth: 0

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.7
        with:
          versionSpec: "5.x"

      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.7
        with:
          useConfigFile: true
          configFilePath: ./.github/version.yml

  build:
    name: Build and Release
    runs-on: windows-latest
    needs: calculate-version
    env:
      SEMVER: ${{ needs.calculate-version.outputs.semVer }}

    steps:
      - uses: actions/checkout@v2.4.2

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1.1

      - name: Setup NuGet
        uses: NuGet/setup-nuget@v1.0.6

      - name: Restore dependencies
        run: nuget restore NFive.sln

      - name: Build the solution
        run: msbuild NFive.sln /p:Configuration=Release /p:Outdir=Build /p:AssemblyVersion=${{ needs.calculate-version.outputs.assemblySemVer}} /p:FileVersion=${{ needs.calculate-version.outputs.assemblySemFileVer}} /p:InformationalVersion=${{ needs.calculate-version.outputs.informationalVersion }}
      
      - name: Create archive file
        shell: pwsh
        run: |
          $compress = @{
            Path = "README.md", "LICENSE", "*.dll", "nfive.yml", "nfive.lock", "fxmanifest.lua", "index.html" "config/"
            CompressionLevel = "Fastest"
            DestinationPath = "nfive.zip"
            }
          Compress-Archive @compress

      # Create a Release on the GitHub project
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ env.SEMVER }}
          release_name: ${{ env.SEMVER }}
          draft: false
          prerelease: false

      # Upload the Build Artifact to the Release
      - name: Update release asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: .\nfive.zip
          asset_name: nfive.zip
          asset_content_type: application/zip